---
description: 
globs: 
alwaysApply: false
---
# xmem Cursor Rules

## 1. Project Philosophy & Architecture
- xmem is a memory orchestrator for LLMs, combining long-term (vector DB) and short-term (context/session) memory, with advanced RAG (retrieval-augmented generation) logic. All design and code should maximize xmem's value and future-proof it in the LLM ecosystem.
- Always prefer open-source solutions and APIs, especially for LLMs (e.g., Llama, Ollama, vLLM, etc.). Avoid proprietary or closed-source dependencies unless absolutely necessary.
- Decouple logic for reusability and maintainability. Centralize reusable functions, constants, types, and interfaces.

## 2. TypeScript & Code Quality
- Always use TypeScript (`.ts`/`.tsx`) for Next.js code unless a file must be JavaScript for compatibility. Use `.d.ts` for type and interface declarations.
- Before creating new types, interfaces, or constants, check for existing ones. Use utility types and generics to avoid duplication.
- Prefer named exports for all modules. Avoid default exports unless required by a framework or library.
- Use strict TypeScript settings (`strict: true` in `tsconfig.json`). Never use `any` unless absolutely unavoidable, and always document why.

## 3. Component & File Structure
- Use the `app/` directory for Next.js 13+ features. Place all client components in their own folders and mark them with `'use client'` at the top.
- Always add `'use client'` to the top of files that use client-only hooks (`useState`, `useEffect`, etc.) or browser APIs.
- All buttons and clickable elements must have `cursor-pointer` styling for clear UX.
- Use semantic HTML and accessible ARIA attributes where appropriate.

## 4. SSR/CSR & Hydration
- Never use browser-only APIs (`window`, `document`, `localStorage`, etc.) in server components. If needed, use them inside `useEffect` or client components only.
- Avoid rendering values that change between server and client (e.g., `Date.now()`, `Math.random()`, locale-dependent formatting) in SSR. If needed, render them only on the client.
- Always test for hydration mismatches in a clean browser profile (incognito, no extensions) before investigating further.
- Document any known hydration warnings caused by browser extensions or external factors.

## 5. State, Context, and Data Fetching
- Use React context for global state only when necessary. Prefer local state and prop drilling for simple cases.
- Use SWR, React Query, or Next.js server actions for data fetching. Always handle loading, error, and empty states.
- For session and authentication, use NextAuth.js or another open-source, well-maintained solution.

## 6. Styling & UI
- Use Tailwind CSS for all styling. Centralize custom classes and themes in a single config file.
- All interactive elements must be keyboard accessible and have visible focus states.
- Use utility-first CSS and avoid inline styles except for dynamic values.

## 7. Testing & Linting
- Write unit tests for all utility functions and critical logic. Use Jest or Vitest.
- Use ESLint and Prettier with strict rules. Never commit code with lint or type errors.
- Add integration tests for key user flows using Playwright or Cypress.

## 8. Packages & Dependencies
- Always use `pnpm` for package management. Never use `npm` or `yarn`.
- Never install packages globally or locally outside Docker. All dependencies must be managed via Docker for consistency.
- Keep dependencies up to date and remove unused packages regularly.

## 9. LLM & API Usage
- Never run LLMs locally. Always use them via API, prioritizing lightweight, free, and open-source endpoints.
- Abstract LLM API calls into a single service layer for easy swapping and testing.

## 10. Performance & Security
- Optimize for fast cold starts and minimal bundle size. Use dynamic imports and code splitting where possible.
- Never expose secrets or sensitive data in the client bundle or public repo.
- Sanitize all user input and validate data at both client and server boundaries.

## 11. Documentation & Developer Experience
- Document all public functions, types, and components with JSDoc or TSDoc.
- Maintain a clear and up-to-date README and CONTRIBUTING guide.
- Add comments for any non-obvious code, especially workarounds for framework quirks (e.g., hydration issues).
- All architectural decisions must be recorded as ADRs (Architecture Decision Records) in `/docs/adr` using Markdown. Every deploy (pipeline run) must generate a new ADR file with a timestamp and deploy info.
- The ADR and SAD (Software Architecture Document) files in the codebase are the source of truth for architectural decisions and system design. Notion or other tools may reference these, but the repo is canonical.

## 12. General Best Practices
- Always check for existing solutions before building new ones.
- Follow the most common and recommended approaches used by top AI and Next.js engineers.
- Prioritize code readability, maintainability, and simplicity over cleverness.
- Always try to fix warnings that appears for us on terminal and logs.
