name: CI

permissions:
  contents: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm lint
      - name: Type Check
        run: pnpm exec tsc --noEmit
      - name: Sync version to src/version.ts
        run: pnpm exec tsx scripts/sync-version.ts
      - name: Build
        run: pnpm build
      # - name: Test
      #   run: pnpm test # Uncomment if you add tests
      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\":white_check_mark: CI passed for ${GITHUB_REPOSITORY} on branch ${GITHUB_REF} by ${GITHUB_ACTOR}. [View run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})\"}" \
            https://discord.com/api/webhooks/1379509677397905408/Ky0S_msUGa9Sd8LynjoFtuYft3IgCq8HiUwSEPu3G65t-8peMYW5ESIcSFK_4LqSt-17
      - name: Notify Discord on Failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\":\":x: CI failed for ${GITHUB_REPOSITORY} on branch ${GITHUB_REF} by ${GITHUB_ACTOR}. [View run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})\"}" \
            https://discord.com/api/webhooks/1379509677397905408/Ky0S_msUGa9Sd8LynjoFtuYft3IgCq8HiUwSEPu3G65t-8peMYW5ESIcSFK_4LqSt-17
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate
      # - name: Run osv-scanner (optional)
      #   run: osv-scanner --lockfile=pnpm-lock.yaml --format=text # Uncomment if using osv-scanner
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Generate Docs
        run: pnpm docs:generate
      # - name: Deploy Docs
      #   run: pnpm docs:deploy # Uncomment and configure if deploying docs

  # Build & Release job (example for npm, Docker, or other artifacts)
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 10.7.1
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build
      # - name: Publish to npm
      #   run: pnpm publish --access public # Uncomment and configure if publishing
      # - name: Build & Push Docker Image
      #   run: echo "Docker build step here" # Uncomment and configure if using Docker
      - name: Generate ADR for Deploy
        run: pnpm adr:deploy
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
      - name: Commit and Push ADR
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/adr/ADR-*.md
          git commit -m "chore(adr): add automated ADR for deploy [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate PlantUML Architecture Diagram
        run: pnpm arch:puml
      - name: Generate SVG from PlantUML
        run: plantuml -tsvg docs/architecture.puml
      - name: Commit and Push Architecture SVG
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/architecture.svg
          git commit -m "chore(arch): update architecture.svg [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Preview Deployment (example for Vercel/Netlify/other)
  preview-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      # - name: Deploy Preview (Vercel/Netlify/etc)
      #   run: echo "Preview deploy step here" # Uncomment and configure for your provider
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Example for Vercel
