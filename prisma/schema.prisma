generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  projects      Project[] // Only projects relation, no direct memories
  apiKey        ApiKey?
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String? // Make type optional
  visibility  String   @default("private")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memories    Memory[]

  @@index([userId])
  @@index([type])
  @@index([visibility])
}

model Memory {
  id         String   @id @default(cuid())
  content    String   @db.Text // The actual memory content
  metadata   Json? // Additional metadata about the memory
  type       String // Type of memory (e.g., "fact", "conversation", "note")
  projectId  String?
  userId     String
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)
  version    Int      @default(1) // For tracking memory versions

  @@index([projectId])
  @@index([type])
  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

enum Role {
  USER
  ADMIN
}
