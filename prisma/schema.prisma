generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FormSubmission {
  id        String   @id @default(cuid())
  email     String
  name      String
  company   String
  employees String
  createdAt DateTime @default(now())
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(USER)
  progress      Progress[] @relation("UserProgress")
}

model Progress {
  id              String   @id @default(cuid())
  skillId         String // Reference to the skill (e.g., HTML, CSS, etc.)
  userId          String
  currentProgress Int // Change to Int for percentage progress
  status          String // Status can be "To be learned" or "In-progress"
  createdAt       DateTime @default(now())
  user            User     @relation("UserProgress", fields: [userId], references: [id])
  skill           Skill    @relation(fields: [skillId], references: [id]) // Assuming you have a Skill model
}

model Skill {
  id        String     @id @default(cuid())
  name      String     @unique // Unique name for the skill
  progress  Progress[] // Relation to Progress model
  createdAt DateTime   @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
