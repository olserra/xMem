generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(USER)
  skills        Skill[]        @relation("UserSkills") // Relation to Skills
  progress      Progress[] // Tracks user's progress on skills
  assessments   Assessment[] // Stores assessments taken by the user
  knowledge     UserKnowledge? @relation("UserKnowledgeRelation")
  quizzes       Quiz[] // Track quizzes completed by the user
}

model UserKnowledge {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("UserKnowledgeRelation", fields: [userId], references: [id])
}

model Assessment {
  id        String   @id @default(cuid())
  userId    String // Foreign key to the User model
  data      Json // Store the assessment data as JSON
  createdAt DateTime @default(now()) // Timestamp for when the assessment was created
  updatedAt DateTime @updatedAt // Timestamp for the last update

  user User @relation(fields: [userId], references: [id]) // Relation to User
}

model Skill {
  id          Int      @id @default(autoincrement()) // Change to Int and auto-increment
  name        String   @unique
  description String?
  category    String?
  labels      String[]
  quizzes     Quiz[] // Relation to quizzes
  createdAt   DateTime @default(now())

  users    User[]     @relation("UserSkills") // Add this relation to User
  Progress Progress[]
}

model Progress {
  id              String   @id @default(cuid())
  skillId         Int // Change skillId to Int
  userId          String
  currentProgress Int // Current progress percentage
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt // Automatically set to current timestamp on update
  user            User     @relation(fields: [userId], references: [id])
  skill           Skill    @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId]) // Unique constraint
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id             String   @id @default(cuid())
  userId         String
  name           String   @default("Unnamed Quiz") // Set a default value
  skillId        Int
  score          Int
  totalQuestions Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])
}

enum Role {
  USER
  ADMIN
}
