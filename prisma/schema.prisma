generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  apiKeys       ApiKey[]
  projects      Project[]
  sessions      Session[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String?
  visibility  String   @default("private")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memories    Memory[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([visibility])
}

model Memory {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  isArchived Boolean   @default(false)
  metadata   Json?
  projectId  String?
  type       String
  userId     String
  version    Int       @default(1)
  confidence Float?
  language   String?
  sentiment  String?
  source     String?
  sourceId   String?
  tags       String[]
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Memory_A   Memory[]  @relation("MemoryRelations")
  Memory_B   Memory[]  @relation("MemoryRelations")
  subjects   Subject[] @relation("MemoryToSubject")

  @@index([projectId])
  @@index([type])
  @@index([userId])
  @@index([source])
  @@index([sourceId])
  @@index([language])
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memories    Memory[] @relation("MemoryToSubject")
}

model SourceConfig {
  id           String    @id @default(cuid())
  userId       String
  source       String
  apiKey       String?
  apiSecret    String?
  webhookUrl   String?
  isEnabled    Boolean   @default(true)
  lastSync     DateTime?
  syncInterval Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, source])
  @@index([userId])
  @@index([source])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  isEnabled Boolean   @default(true)
  lastUsed  DateTime?
  name      String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}
