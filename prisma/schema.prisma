// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  users       User[]
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  memorySources  MemorySource[]
  APIKey         APIKey[]
  Project        Project[]
  organizationId String?
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  role           Role?          @default(MEMBER)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MemorySource {
  id             String    @id @default(cuid())
  name           String
  type           String
  status         String
  itemCount      Int? // Optional, can be updated after sync
  lastSync       DateTime?
  vectorDbUrl    String
  apiKey         String
  embeddingModel String
  llmProvider    String?
  maxCacheSize   Int
  sessionTtl     Int
  enableCache    Boolean
  collection     String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  project        Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?
}

model APIKey {
  id        String    @id @default(cuid())
  name      String
  key       String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  revokedAt DateTime?
}

model Project {
  id             String         @id @default(cuid())
  name           String
  description    String?
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  memorySources  MemorySource[]
  organizationId String?
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
}
