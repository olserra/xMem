// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  users       User[]
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  memorySources  MemorySource[]
  APIKey         APIKey[]
  Project        Project[]
  organizationId String?
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  role           Role?           @default(MEMBER)
  SessionMemory  SessionMemory[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MemorySource {
  id             String                @id @default(cuid())
  type           String
  status         String
  itemCount      Int? // Optional, can be updated after sync
  lastSync       DateTime?
  vectorDbUrl    String
  apiKey         String
  embeddingModel String
  llmProvider    String?
  maxCacheSize   Int
  sessionTtl     Int
  enableCache    Boolean
  collection     String
  metric         String?
  dimensions     Int?
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  project        Project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String?
  projects       ProjectMemorySource[]
}

model APIKey {
  id        String    @id @default(cuid())
  name      String
  key       String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  revokedAt DateTime?
}

model Project {
  id             String                @id @default(cuid())
  name           String
  description    String?
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  memorySources  ProjectMemorySource[]
  organizationId String?
  organization   Organization?         @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  MemorySource   MemorySource[]
}

model ProjectMemorySource {
  id             String       @id @default(cuid())
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  memorySource   MemorySource @relation(fields: [memorySourceId], references: [id], onDelete: Cascade)
  memorySourceId String

  @@unique([projectId, memorySourceId])
}

model AuditLog {
  id             String   @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  resource       String
  resourceId     String?
  details        Json?
  ipAddress      String?
  userAgent      String?
  timestamp      DateTime @default(now())
}

model SessionMessage {
  id        String        @id @default(cuid())
  sessionId String
  userId    String
  role      String // 'user' or 'assistant'
  content   String
  embedding Float[] // Vector embedding
  pinned    Boolean       @default(false)
  deleted   Boolean       @default(false)
  createdAt DateTime      @default(now())
  session   SessionMemory @relation(fields: [sessionId], references: [sessionId])
}

model SessionMemory {
  sessionId String           @id
  userId    String
  summary   String? // Optional: running summary
  updatedAt DateTime         @updatedAt
  messages  SessionMessage[]
  User      User             @relation(fields: [userId], references: [id])
}

model ContextInjectionLog {
  id                String   @id @default(cuid())
  userId            String
  sessionId         String
  query             String
  injectedMsgIds    String // Comma-separated or as a relation
  injectedSummary   String?
  injectedVectorIds String?
  createdAt         DateTime @default(now())
}
